@page "/shopping/cart/my-cart"
@implements IDisposable

@if (cartService.IsCartLoaderVisible)
{
    <LoadingPage />
}
else
{
    <div class="container-fluid">
        <div class="row">
            <!-- Cart Summary -->
            <div class="col-lg-3">
                <div class="card">
                    <div class="card-header">
                        Cart Summary
                    </div>
                    <div class="card-body p-5">
                        <span>
                            <sup style="font-size:30px; font-family:Impact;">$</sup>
                            <sup style="font-family:Tahoma; font-size:30px;">
                                @MyCartOrders.Sum(_ => _.SubTotal).ToString("#.##")
                            </sup>
                        </span>
                    </div>
                    <div class="card-footer">
                        <button class="btn btn-lg btn-danger">
                            <i class="fa fa-cart-arrow-down"></i> Procced to Checkout
                        </button>
                    </div>
                </div>
            </div>

            <!-- Cart Details -->
            <div class="col-lg-9">
                <BannerPage />
                <div class="card">
                    <div class="card-header">Cart Details</div>
                    <div class="card-body">
                        <table class="table table-striped">
                            <thead>
                                <tr>
                                    <th>#</th>
                                    <th>Image</th>
                                    <th>Name</th>
                                    <th>Price</th>
                                    <th>Quantity</th>
                                    <th>Subtotal</th>
                                    <th>Action</th>
                                </tr>
                            </thead>
                            <tbody>
                                @if (MyCartOrders is not null)
                                {
                                    var listData = MyCartOrders.Skip(SkipValue).Take(TakeValue).ToList();
                                    int count = 1;
                                    foreach (var item in listData)
                                    {
                                        <tr>
                                            <td>@count</td>
                                            <td><img src="@item.Image" width="100" height="150" /></td>
                                            <td>@item.Name</td>
                                            <td>@item.Price</td>
                                            <td>
                                                <input type="number" min="1" class="form-control w-25"
                                                       value="@item.Quantity"
                                                       @onchange="@(e => HandleChange(e, item))" />
                                            </td>
                                            <td>@item.SubTotal</td>
                                            <td>
                                                <a id="changeCursor" @onclick="async () => DeleteCart(item)">
                                                    <i class="fa fa-trash text-danger"></i>
                                                </a>
                                            </td>
                                        </tr>
                                        count++;
                                    }
                                }
                            </tbody>
                        </table>
                    </div>
                    <div class="card-footer">
                        <div class="d-flex justify-content-center">
                            <SfPager @ref="Page" PageSize="3" NumericItemsCount="4"
                                     TotalItemsCount="MyCartOrders!.Count"
                                     ItemClick="Click"></SfPager>
                        </div>
                    </div>
                </div>
                <RecommendedPage />
            </div>
        </div>
    </div>
}

<MessageDialog @ref="messageDialogService.messageDialog"></MessageDialog>

<style>
    #changeCursor {
        cursor: pointer;
    }
</style>


@code {
    SfPager? Page;
    public int SkipValue { get; set; }
    public int TakeValue { get; set; } = 3;

    List<Order> MyCartOrders = new();

    protected override async Task OnInitializedAsync()
    {
        MyCartOrders = await cartService.MyOrders();
        messageDialogService.Action += StateHasChanged;
    }

    async Task HandleChange(Microsoft.AspNetCore.Components.ChangeEventArgs e, Order order)
    {
        try
        {
            if (int.TryParse(e.Value?.ToString(), out int newQuantity) && newQuantity > 0)
            {
                var getOrder = MyCartOrders.FirstOrDefault(o => o.Id == order.Id);
                if (getOrder != null)
                {
                    getOrder.Quantity = newQuantity;

                    // Cập nhật số lượng trong giỏ hàng
                    var response = await cartService.AddToCart(new Product { Id = order.Id }, newQuantity);
                    DisplayResponse(response);
                }
            }
        }
        catch
        {
            // Bỏ qua lỗi (có thể thêm log lỗi nếu cần)
        }
    }

    async Task DeleteCart(Order cart)
    {
        try
        {
            // Xóa phần tử khỏi danh sách
            MyCartOrders = MyCartOrders.Where(o => o.Id != cart.Id).ToList();

            // Gửi yêu cầu đến server để xóa
            var response = await cartService.DeleteCart(cart);

            // Hiển thị phản hồi
            DisplayResponse(response);
        }
        catch
        {
            // Bỏ qua lỗi (có thể thêm log lỗi nếu cần)
        }
    }

    void DisplayResponse(ServiceResponse serviceResponse)
    {
        if (serviceResponse.Flag)
        {
            messageDialogService.messageDialog?.SetDialogValues("Success", serviceResponse.Message);
        }
        else
        {
            messageDialogService.messageDialog?.SetDialogValues("Warning", serviceResponse.Message);
        }
        messageDialogService.SetMessageDialog();
    }

    public void Click(PagerItemClickEventArgs args)
    {
        SkipValue = (args.CurrentPage - 1) * Page!.PageSize;
        TakeValue = Page.PageSize;
    }

    public void Dispose()
    {
        messageDialogService.Action -= StateHasChanged;
    }
}

